import Head from "next/head";
import { Inter } from "next/font/google";
import Navbar from "@/components/layouts/Navbar";
import { Box, Container, Grid } from "@mui/material";
import Footer from "@/components/layouts/Footer";
import CardPlace from "@/components/cards/CardPlace";
import { NextPage } from "next";
import { useEffect } from "react";
import { setSearchAction } from "../redux/slices/search";
import { dispatch } from "@/redux/store";
import axios from "axios";
import {
  setIsLoadingAction,
  setPlacesListDataAction,
} from "@/redux/slices/places";
import { useAppSelector } from "@/redux/hooks";
import CardLoading from "@/components/cards/CardLoading";
import getConfig from "next/config";

const { serverRuntimeConfig } = getConfig();
const { BASE_URL } = serverRuntimeConfig;

const inter = Inter({ subsets: ["latin"] });
interface Props {
  query: string;
  apiKey: string;
}

const Home: NextPage<Props> = ({ query, apiKey }) => {
  const { isLoading, data } = useAppSelector((state) => state.places);

  const getSearchPlaces = async () => {
    dispatch(setIsLoadingAction(true));
    const response = await axios.post(
      `/api/search-places`,
      {
        apiKey: apiKey,
        search: query,
      }
    );
    dispatch(setPlacesListDataAction(response.data));
    dispatch(setIsLoadingAction(false));
  };

  useEffect(() => {
    if (query) {
      dispatch(setSearchAction(query));
    }
    const fetchData = async () => {
      try {
        if (query) {
          await getSearchPlaces();
        }
      } catch (error: any) {
        console.error("Error fetching place data:", error.message);
      }
    };
    return () => {
      fetchData();
      dispatch(setIsLoadingAction(false));
    };
  }, [dispatch, query]);

  return (
    <>
      <Head>
        <title>WEBSITE-DEV</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <Container maxWidth="md">
        <main>
          <Box sx={{ flexGrow: 1, marginTop: 10, marginBottom: 10 }}>
            <Grid container spacing={2}>
              {!isLoading ? (
                <>
                  {data.results.length > 0 ? (
                    <>
                      {data.results.map((item, index) => {
                        return (
                          <Grid item xs={12} md={12} key={index}>
                            <CardPlace
                              title={item.name}
                              latitude={item.geometry.location.lat}
                              longitude={item.geometry.location.lng}
                              photos={item.photos ? item.photos: []}
                            />
                          </Grid>
                        );
                      })}
                    </>
                  ) : (
                    <>
                      <Grid item xs={12} md={12} sx={{ textAlign: "center" }}>
                        ไม่มีข้อมูล
                      </Grid>
                    </>
                  )}
                </>
              ) : (
                <Grid item xs={12} md={12}>
                  <CardLoading />
                </Grid>
              )}
            </Grid>
          </Box>
        </main>
      </Container>
      <Footer />
    </>
  );
};
Home.getInitialProps = async ({ query }) => {
  const response = await axios.post(`${BASE_URL}/api/login-email`, {
    idToken:
      "eyJhbGciOiJSUzI1NiIsImtpZCI6ImExODE4ZjQ0ODk0MjI1ZjQ2MWQyMmI1NjA4NDcyMDM3MTc2MGY1OWIiLCJ0eXAiOiJKV1QifQ",
  });
  return { query: (query.s as string) || "", apiKey: response.data.apiKey };
};
export default Home;
